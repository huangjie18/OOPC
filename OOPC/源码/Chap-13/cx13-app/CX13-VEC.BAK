/* cx13-vec.c  */
#include <stdio.h>
#include "cx13-vec.h"

static void init(Vector* t)  {  t->V = NULL;  t->size = 0;  }
static void init_fi(Vector* t, float *from, int n )  {
       int i;
       t->V = (float*)malloc(n * sizeof(float));
       t->size=n;
       for( i=0;  i<t->size; i++ )
	   t->V[i] = *from++;
      }
static void init_i(Vector* t, int n )
   {  int i;
      t->V = (float*)malloc(n * sizeof(float));
      t->size = n;
      for( i=0;  i<t->size; i++ )
	  t->V[i] = 1.0;
  }
static void destroy(Vector* t)            { if( t->V != NULL ) free(t->V);  }
static float* get(Vector* t, int i )      { return &t->V[i];   }
static float get_val(Vector* t, int i )   { return t->V[i];    }
static int EQ(Vector* t, Vector* from )
    {  float k;  int i;
       if(t->size != from->size) return 0;
       for( i=0; i<t->size; i++ ) {
		  k = t->V[i] - from->get_val(from, i);
		  if( k > 0.00001 || k < -0.00001 )  return 0;
	    }
       return 1;
}
static void set(Vector* t, float *from, int n )
     { int i;
       if( t->V != NULL )  free(t->V);
	   t->V = (float*)malloc(n * sizeof(float));
       t->size = n;
       for(i=0;  i<t->size; i++ )
            t->V[i] = *from++;
     }
static Vector* assign(Vector *t, Vector* from)
	{int i;
     if( t->V != NULL )    free(t->V);
     t->size = from->size;
	 t->V = (float*)malloc(t->size * sizeof(float));
	 for( i=0;  i<from->size; i++ )
            t->V[i] = from->get_val(from, i);
	  return t;
 }
static void mul(Vector* t, float ratio )
       { int i;
       	 for( i=0;  i<t->size; i++ )
         t->V[i] =  t->V[i] * ratio;
	    }
static void div(Vector* t, float ratio )
   { int i;
     for( i=0;  i < t->size; i++ )
		  t->V[i] /= ratio;
   }
static void PR(Vector* t)
     { int i;
       for( i=0;  i<t->size; i++ )
		   printf("%4.1f ", t->V[i]);
       printf("\n");
      }
static int indexOfMax(Vector* t)
     {
       float max = *(t->V);
	   int k =0;
	   for( i=0;  i<t->size; i++ )
	      if( max < t->V[i] )
	        {  max = t->V[i]; k=i; }
       return k;
 }
int includes(Vector* t,  int v )
     { int i;   int k =0;
       for( i=0; i<t->size; i++ )
	        if( v == (int)(t->V[i]) ) k = 1;
       return k;
 }

CTOR(Vector)
    FUNCTION_SETTING(init, init);
    FUNCTION_SETTING(init_fi, init_fi);
    FUNCTION_SETTING(init_i, init_i);
	FUNCTION_SETTING(destroy, destroy);
	FUNCTION_SETTING(get, get);
    FUNCTION_SETTING(get_val, get_val);
    FUNCTION_SETTING(EQ, EQ);
    FUNCTION_SETTING(set, set);
    FUNCTION_SETTING(assign, assign);
    FUNCTION_SETTING(mul, mul);
    FUNCTION_SETTING(div, div);
    FUNCTION_SETTING(PR, PR);
    FUNCTION_SETTING(indexOfMax, indexOfMax);
    FUNCTION_SETTING(includes, includes);
END_CTOR